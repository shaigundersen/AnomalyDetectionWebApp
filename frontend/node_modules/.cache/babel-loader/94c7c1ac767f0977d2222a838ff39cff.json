{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\97205\\\\Desktop\\\\ass2\\\\AnomalyDetectionWebApp\\\\frontend\\\\src\\\\components\\\\inputForm.jsx\";\nimport React, { Component } from \"react\";\nimport Button from \"react-bootstrap/Button\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Form from \"react-bootstrap/Form\";\nimport Card from \"react-bootstrap/Card\";\nimport { BarChart, Bar, Cell, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from \"recharts\";\nimport \"../style.css\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass InputForm extends Component {\n  constructor(props) {\n    super(props);\n\n    this.selectionChanged = event => {\n      this.setState({\n        detectorType: event.target.value\n      });\n    };\n\n    this.fileSelected = event => {\n      let file = event.target.files[0];\n      let file_type = file.type; //getting selected file type\n\n      let valid_extensions = [\"application/vnd.ms-excel\", \"csv\"]; //adding some valid csv extensions in array\n\n      let fileNameProperty = event.target.name;\n      let fileName = event.target.files[0].name;\n      this.setState({\n        [fileNameProperty]: fileName\n      });\n      let fileDataProperty = fileNameProperty.replace(\"Name\", \"\");\n      let fileError = fileNameProperty.replace(\"Name\", \"Error\");\n\n      if (valid_extensions.includes(file_type)) {\n        // set error to be false\n        this.setState({\n          [fileError]: false\n        }); // valid extention -> make json of it\n\n        this.csvToJson(file, fileDataProperty);\n      } else {\n        // invalid type -> raise error\n        this.setState({\n          [fileError]: true\n        });\n      }\n\n      event.target.value = null;\n    };\n\n    this.submitHandler = event => {\n      event.preventDefault();\n      axios.post(\"/detect\", {\n        detectorType: this.state.detectorType,\n        learn: this.state.learnFile,\n        anomaly: this.state.anomalyFile\n      }).then(response => {\n        let anomalyReport = response.data.report; // this report.timeStep is of type = [1,2,3,4]\n\n        let fixedReport = []; // this fixedReport.timeStep will be of type= [1,4]\n\n        anomalyReport.forEach(rep => {\n          fixedReport.push({\n            description: rep.description.replace(\"~~\", \"\\n\")\n          });\n        });\n        console.log(fixedReport); // update parent on the given report\n        //this.props.parentCallback(fixedReport);\n      }).catch(err => console.log(err)); //set the form back to default\n\n      this.setDefaultState();\n    };\n\n    this.state = {\n      detectorType: \"\",\n      learnFileName: \"Please Upload Learn CSV\",\n      anomalyFileName: \"Please Upload Anomaly CSV\",\n      learnFile: null,\n      // learn file\n      anomalyFile: null,\n      // test file\n      learnFileError: false,\n      // for validation\n      anomalyFileError: false,\n      // for validation\n      mydata: []\n    }; // preserve the initial state to fall back to\n\n    this.baseState = this.state;\n  }\n\n  csvToJson(file, fileDataProperty) {\n    let fileReader = new FileReader(); //creating new FileReader object\n\n    fileReader.readAsText(file, \"UTF-8\");\n\n    fileReader.onload = () => {\n      var lines = fileReader.result.split(/\\r\\n|\\r|\\n/g); //split by new line depending on system\n\n      var result = [];\n      var headers = lines[0].split(\",\");\n      var len = lines.length;\n\n      for (var i = 0; i < headers.length; i++) {\n        var obj = {};\n        var values = [];\n\n        for (var j = 1; j < len - 1; j++) {\n          var currentline = lines[j].split(\",\");\n          values.push(parseFloat(currentline[i]));\n        }\n\n        obj[headers[i]] = values;\n        result.push(obj);\n      }\n\n      var json = JSON.stringify(result); //JSON\n\n      json = json.replaceAll(\"{\", \"\");\n      json = json.replaceAll(\"}\", \"\");\n      json = json.substring(1, json.length - 1); // remove wrapping []\n\n      json = \"{\" + json + \"}\";\n      this.setState({\n        [fileDataProperty]: json\n      });\n    };\n  } // file selected handler\n\n\n  setDefaultState() {\n    this.setState(this.baseState);\n  } // if any of conditions are satisfied -> form is incomplete -> disable submit button\n\n\n  checkFormValidation() {\n    const {\n      detectorType,\n      learnFileName,\n      anomalyFileName,\n      learnFileError,\n      anomalyFileError\n    } = this.state;\n    if (detectorType === this.baseState.detectorType) return true;\n    if (learnFileName === this.baseState.learnFileName || learnFileError) return true;\n    if (anomalyFileName === this.baseState.anomalyFileName || anomalyFileError) return true;\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: /*#__PURE__*/_jsxDEV(Row, {\n        children: /*#__PURE__*/_jsxDEV(Form, {\n          className: \"m-3 items mainForm needs-validation\",\n          noValidate: true,\n          onSubmit: this.submitHandler,\n          children: /*#__PURE__*/_jsxDEV(Row, {\n            children: [/*#__PURE__*/_jsxDEV(Col, {\n              xs: \"auto\",\n              children: /*#__PURE__*/_jsxDEV(Form.Control, {\n                as: \"select\",\n                className: \"mr-sm-2\",\n                onChange: this.selectionChanged,\n                custom: true,\n                value: this.state.detectorType,\n                children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"\",\n                  children: \"Choose Algorithem...\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 152,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"regression\",\n                  children: \"Regression\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 153,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"hybrid\",\n                  children: \"Hybrid\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 154,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 145,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 144,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Col, {\n              children: /*#__PURE__*/_jsxDEV(Form.Group, {\n                children: /*#__PURE__*/_jsxDEV(Form.File, {\n                  className: \"inputFile\",\n                  id: \"custom-file\",\n                  custom: true,\n                  children: [/*#__PURE__*/_jsxDEV(Form.File.Input, {\n                    name: \"learnFileName\",\n                    onInput: this.fileSelected,\n                    isInvalid: this.state.learnFileError\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 160,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(Form.File.Label, {\n                    children: this.state.learnFileName\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 165,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(Form.Control.Feedback, {\n                    type: \"invalid\",\n                    children: \"file is not CSV type!\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 168,\n                    columnNumber: 21\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 159,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 158,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 157,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Col, {\n              children: /*#__PURE__*/_jsxDEV(Form.Group, {\n                children: /*#__PURE__*/_jsxDEV(Form.File, {\n                  className: \"inputFile\",\n                  id: \"custom-file\",\n                  custom: true,\n                  children: [/*#__PURE__*/_jsxDEV(Form.File.Input, {\n                    name: \"anomalyFileName\",\n                    onInput: this.fileSelected,\n                    isInvalid: this.state.anomalyFileError\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 177,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(Form.File.Label, {\n                    children: this.state.anomalyFileName\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 182,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(Form.Control.Feedback, {\n                    type: \"invalid\",\n                    children: \"file is not CSV type!\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 185,\n                    columnNumber: 21\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 176,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 175,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 174,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Col, {\n              children: /*#__PURE__*/_jsxDEV(Button, {\n                type: \"submit\",\n                disabled: this.checkFormValidation(),\n                children: \"Submit\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 192,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 191,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 143,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default InputForm;","map":{"version":3,"sources":["C:/Users/97205/Desktop/ass2/AnomalyDetectionWebApp/frontend/src/components/inputForm.jsx"],"names":["React","Component","Button","Row","Col","Form","Card","BarChart","Bar","Cell","XAxis","YAxis","CartesianGrid","Tooltip","Legend","ResponsiveContainer","axios","InputForm","constructor","props","selectionChanged","event","setState","detectorType","target","value","fileSelected","file","files","file_type","type","valid_extensions","fileNameProperty","name","fileName","fileDataProperty","replace","fileError","includes","csvToJson","submitHandler","preventDefault","post","state","learn","learnFile","anomaly","anomalyFile","then","response","anomalyReport","data","report","fixedReport","forEach","rep","push","description","console","log","catch","err","setDefaultState","learnFileName","anomalyFileName","learnFileError","anomalyFileError","mydata","baseState","fileReader","FileReader","readAsText","onload","lines","result","split","headers","len","length","i","obj","values","j","currentline","parseFloat","json","JSON","stringify","replaceAll","substring","checkFormValidation","render"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport Card from \"react-bootstrap/Card\";\r\nimport {\r\n  BarChart,\r\n  Bar,\r\n  Cell,\r\n  XAxis,\r\n  YAxis,\r\n  CartesianGrid,\r\n  Tooltip,\r\n  Legend,\r\n  ResponsiveContainer,\r\n} from \"recharts\";\r\n\r\nimport \"../style.css\";\r\nimport axios from \"axios\";\r\n\r\nclass InputForm extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      detectorType: \"\",\r\n      learnFileName: \"Please Upload Learn CSV\",\r\n      anomalyFileName: \"Please Upload Anomaly CSV\",\r\n      learnFile: null, // learn file\r\n      anomalyFile: null, // test file\r\n      learnFileError: false, // for validation\r\n      anomalyFileError: false, // for validation\r\n      mydata: [],\r\n    };\r\n    // preserve the initial state to fall back to\r\n    this.baseState = this.state;\r\n  }\r\n  selectionChanged = (event) => {\r\n    this.setState({ detectorType: event.target.value });\r\n  };\r\n\r\n  csvToJson(file, fileDataProperty) {\r\n    let fileReader = new FileReader(); //creating new FileReader object\r\n    fileReader.readAsText(file, \"UTF-8\");\r\n    fileReader.onload = () => {\r\n      var lines = fileReader.result.split(/\\r\\n|\\r|\\n/g); //split by new line depending on system\r\n      var result = [];\r\n      var headers = lines[0].split(\",\");\r\n      var len = lines.length;\r\n      for (var i = 0; i < headers.length; i++) {\r\n        var obj = {};\r\n        var values = [];\r\n        for (var j = 1; j < len - 1; j++) {\r\n          var currentline = lines[j].split(\",\");\r\n          values.push(parseFloat(currentline[i]));\r\n        }\r\n        obj[headers[i]] = values;\r\n        result.push(obj);\r\n      }\r\n      var json = JSON.stringify(result); //JSON\r\n      json = json.replaceAll(\"{\", \"\");\r\n      json = json.replaceAll(\"}\", \"\");\r\n      json = json.substring(1, json.length - 1); // remove wrapping []\r\n      json = \"{\" + json + \"}\";\r\n      this.setState({ [fileDataProperty]: json });\r\n    };\r\n  }\r\n  // file selected handler\r\n  fileSelected = (event) => {\r\n    let file = event.target.files[0];\r\n    let file_type = file.type; //getting selected file type\r\n    let valid_extensions = [\"application/vnd.ms-excel\", \"csv\"]; //adding some valid csv extensions in array\r\n    let fileNameProperty = event.target.name;\r\n    let fileName = event.target.files[0].name;\r\n    this.setState({ [fileNameProperty]: fileName });\r\n    let fileDataProperty = fileNameProperty.replace(\"Name\", \"\");\r\n    let fileError = fileNameProperty.replace(\"Name\", \"Error\");\r\n    if (valid_extensions.includes(file_type)) {\r\n      // set error to be false\r\n      this.setState({ [fileError]: false });\r\n      // valid extention -> make json of it\r\n      this.csvToJson(file, fileDataProperty);\r\n    } else {\r\n      // invalid type -> raise error\r\n      this.setState({ [fileError]: true });\r\n    }\r\n    event.target.value = null;\r\n  };\r\n\r\n  setDefaultState() {\r\n    this.setState(this.baseState);\r\n  }\r\n  // if any of conditions are satisfied -> form is incomplete -> disable submit button\r\n  checkFormValidation() {\r\n    const {\r\n      detectorType,\r\n      learnFileName,\r\n      anomalyFileName,\r\n      learnFileError,\r\n      anomalyFileError,\r\n    } = this.state;\r\n    if (detectorType === this.baseState.detectorType) return true;\r\n    if (learnFileName === this.baseState.learnFileName || learnFileError)\r\n      return true;\r\n    if (anomalyFileName === this.baseState.anomalyFileName || anomalyFileError)\r\n      return true;\r\n  }\r\n\r\n  submitHandler = (event) => {\r\n    event.preventDefault();\r\n    axios\r\n      .post(\"/detect\", {\r\n        detectorType: this.state.detectorType,\r\n        learn: this.state.learnFile,\r\n        anomaly: this.state.anomalyFile,\r\n      })\r\n      .then((response) => {\r\n        let anomalyReport = response.data.report; // this report.timeStep is of type = [1,2,3,4]\r\n        let fixedReport = []; // this fixedReport.timeStep will be of type= [1,4]\r\n        anomalyReport.forEach((rep) => {\r\n          fixedReport.push({\r\n            description: rep.description.replace(\"~~\", \"\\n\"),\r\n          });\r\n        });\r\n        console.log(fixedReport);\r\n        // update parent on the given report\r\n        //this.props.parentCallback(fixedReport);\r\n      })\r\n      .catch((err) => console.log(err));\r\n    //set the form back to default\r\n    this.setDefaultState();\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <Row>\r\n          <Form\r\n            className=\"m-3 items mainForm needs-validation\"\r\n            noValidate\r\n            onSubmit={this.submitHandler}\r\n          >\r\n            <Row>\r\n              <Col xs=\"auto\">\r\n                <Form.Control\r\n                  as=\"select\"\r\n                  className=\"mr-sm-2\"\r\n                  onChange={this.selectionChanged}\r\n                  custom\r\n                  value={this.state.detectorType}\r\n                >\r\n                  <option value=\"\">Choose Algorithem...</option>\r\n                  <option value=\"regression\">Regression</option>\r\n                  <option value=\"hybrid\">Hybrid</option>\r\n                </Form.Control>\r\n              </Col>\r\n              <Col>\r\n                <Form.Group>\r\n                  <Form.File className=\"inputFile\" id=\"custom-file\" custom>\r\n                    <Form.File.Input\r\n                      name=\"learnFileName\"\r\n                      onInput={this.fileSelected}\r\n                      isInvalid={this.state.learnFileError}\r\n                    />\r\n                    <Form.File.Label>\r\n                      {this.state.learnFileName}\r\n                    </Form.File.Label>\r\n                    <Form.Control.Feedback type=\"invalid\">\r\n                      file is not CSV type!\r\n                    </Form.Control.Feedback>\r\n                  </Form.File>\r\n                </Form.Group>\r\n              </Col>\r\n              <Col>\r\n                <Form.Group>\r\n                  <Form.File className=\"inputFile\" id=\"custom-file\" custom>\r\n                    <Form.File.Input\r\n                      name=\"anomalyFileName\"\r\n                      onInput={this.fileSelected}\r\n                      isInvalid={this.state.anomalyFileError}\r\n                    />\r\n                    <Form.File.Label>\r\n                      {this.state.anomalyFileName}\r\n                    </Form.File.Label>\r\n                    <Form.Control.Feedback type=\"invalid\">\r\n                      file is not CSV type!\r\n                    </Form.Control.Feedback>\r\n                  </Form.File>\r\n                </Form.Group>\r\n              </Col>\r\n              <Col>\r\n                <Button type=\"submit\" disabled={this.checkFormValidation()}>\r\n                  Submit\r\n                </Button>\r\n              </Col>\r\n            </Row>\r\n          </Form>\r\n        </Row>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default InputForm;\r\n"]},"metadata":{},"sourceType":"module"}