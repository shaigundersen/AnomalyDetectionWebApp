{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\97205\\\\Desktop\\\\ass2\\\\AnomalyDetectionWebApp\\\\frontend\\\\src\\\\components\\\\anomalyChart.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport \"../style.css\";\nimport { BarChart, Bar, Cell, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer, LineChart, Line } from \"recharts\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst CustomizedTooltip = ({\n  active,\n  payload,\n  label\n}) => {\n  if (active && payload && payload.length) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"custom-tooltip\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"label\",\n        children: `Anomalies found from : ${payload[0].value[0]} until : ${payload[0].value[1]}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"desc\",\n        children: \"Anything you want can be displayed here.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }, this);\n  }\n\n  return null;\n};\n\n_c = CustomizedTooltip;\n\nconst CustomizedLabelAxis = ({\n  x,\n  y,\n  payload\n}) => {\n  const splitted = payload.value.split(\"~~\");\n  return /*#__PURE__*/_jsxDEV(\"g\", {\n    transform: `translate(${x},${y})`,\n    children: /*#__PURE__*/_jsxDEV(\"text\", {\n      x: 0,\n      y: 0,\n      textAnchor: \"end\",\n      fill: \"#666\",\n      children: [/*#__PURE__*/_jsxDEV(\"tspan\", {\n        children: splitted[0]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tspan\", {\n        x: 0,\n        dy: \"20\",\n        children: splitted[1]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 5\n  }, this);\n};\n\n_c2 = CustomizedLabelAxis;\n\nfunction measureText(description) {\n  const splitted = description.split(\"~~\");\n  const ctx = document.createElement(\"canvas\").getContext(\"2d\");\n  return Math.max(ctx.measureText(splitted[0]).width, ctx.measureText(splitted[1]).width);\n}\n\nconst AnomalyChart = props => {\n  _s();\n\n  const [data] = useState(props.data);\n  let leftMargin = 0;\n  data.forEach(element => {\n    const textWidth = measureText(element.description);\n\n    if (textWidth > leftMargin) {\n      leftMargin = textWidth;\n    }\n  });\n  console.log(leftMargin);\n  leftMargin += 30;\n  return /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n    className: \"chart\",\n    width: \"50%\",\n    height: 400,\n    children: /*#__PURE__*/_jsxDEV(BarChart, {\n      data: data,\n      margin: {\n        top: 5,\n        right: 30,\n        left: leftMargin,\n        bottom: 5\n      },\n      layout: \"vertical\",\n      children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n        strokeDasharray: \"3 3\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n        type: \"number\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(YAxis, {\n        type: \"category\",\n        dataKey: \"description\",\n        tick: /*#__PURE__*/_jsxDEV(CustomizedLabelAxis, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n        content: /*#__PURE__*/_jsxDEV(CustomizedTooltip, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 27\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Bar, {\n        dataKey: \"timeStep\",\n        fill: \"#8884d8\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 5\n  }, this);\n};\n\n_s(AnomalyChart, \"Z0uJ5tuDLg7cvkKdywsVp5Flv3g=\");\n\n_c3 = AnomalyChart;\nexport default AnomalyChart;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"CustomizedTooltip\");\n$RefreshReg$(_c2, \"CustomizedLabelAxis\");\n$RefreshReg$(_c3, \"AnomalyChart\");","map":{"version":3,"sources":["C:/Users/97205/Desktop/ass2/AnomalyDetectionWebApp/frontend/src/components/anomalyChart.jsx"],"names":["React","useState","BarChart","Bar","Cell","XAxis","YAxis","CartesianGrid","Tooltip","Legend","ResponsiveContainer","LineChart","Line","CustomizedTooltip","active","payload","label","length","value","CustomizedLabelAxis","x","y","splitted","split","measureText","description","ctx","document","createElement","getContext","Math","max","width","AnomalyChart","props","data","leftMargin","forEach","element","textWidth","console","log","top","right","left","bottom"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AAEA,OAAO,cAAP;AACA,SACEC,QADF,EAEEC,GAFF,EAGEC,IAHF,EAIEC,KAJF,EAKEC,KALF,EAMEC,aANF,EAOEC,OAPF,EAQEC,MARF,EASEC,mBATF,EAUEC,SAVF,EAWEC,IAXF,QAYO,UAZP;;;AAcA,MAAMC,iBAAiB,GAAG,CAAC;AAAEC,EAAAA,MAAF;AAAUC,EAAAA,OAAV;AAAmBC,EAAAA;AAAnB,CAAD,KAAgC;AACxD,MAAIF,MAAM,IAAIC,OAAV,IAAqBA,OAAO,CAACE,MAAjC,EAAyC;AACvC,wBACE;AAAK,MAAA,SAAS,EAAC,gBAAf;AAAA,8BACE;AAAG,QAAA,SAAS,EAAC,OAAb;AAAA,kBAAuB,0BAAyBF,OAAO,CAAC,CAAD,CAAP,CAAWG,KAAX,CAAiB,CAAjB,CAAoB,YAAWH,OAAO,CAAC,CAAD,CAAP,CAAWG,KAAX,CAAiB,CAAjB,CAAoB;AAAnG;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAG,QAAA,SAAS,EAAC,MAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAMD;;AACD,SAAO,IAAP;AACD,CAVD;;KAAML,iB;;AAWN,MAAMM,mBAAmB,GAAG,CAAC;AAAEC,EAAAA,CAAF;AAAKC,EAAAA,CAAL;AAAQN,EAAAA;AAAR,CAAD,KAAuB;AACjD,QAAMO,QAAQ,GAAGP,OAAO,CAACG,KAAR,CAAcK,KAAd,CAAoB,IAApB,CAAjB;AACA,sBACE;AAAG,IAAA,SAAS,EAAG,aAAYH,CAAE,IAAGC,CAAE,GAAlC;AAAA,2BACE;AAAM,MAAA,CAAC,EAAE,CAAT;AAAY,MAAA,CAAC,EAAE,CAAf;AAAkB,MAAA,UAAU,EAAC,KAA7B;AAAmC,MAAA,IAAI,EAAC,MAAxC;AAAA,8BACE;AAAA,kBAAQC,QAAQ,CAAC,CAAD;AAAhB;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAO,QAAA,CAAC,EAAE,CAAV;AAAa,QAAA,EAAE,EAAC,IAAhB;AAAA,kBACGA,QAAQ,CAAC,CAAD;AADX;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAUD,CAZD;;MAAMH,mB;;AAaN,SAASK,WAAT,CAAqBC,WAArB,EAAkC;AAChC,QAAMH,QAAQ,GAAGG,WAAW,CAACF,KAAZ,CAAkB,IAAlB,CAAjB;AACA,QAAMG,GAAG,GAAGC,QAAQ,CAACC,aAAT,CAAuB,QAAvB,EAAiCC,UAAjC,CAA4C,IAA5C,CAAZ;AACA,SAAOC,IAAI,CAACC,GAAL,CACLL,GAAG,CAACF,WAAJ,CAAgBF,QAAQ,CAAC,CAAD,CAAxB,EAA6BU,KADxB,EAELN,GAAG,CAACF,WAAJ,CAAgBF,QAAQ,CAAC,CAAD,CAAxB,EAA6BU,KAFxB,CAAP;AAID;;AACD,MAAMC,YAAY,GAAIC,KAAD,IAAW;AAAA;;AAC9B,QAAM,CAACC,IAAD,IAASlC,QAAQ,CAACiC,KAAK,CAACC,IAAP,CAAvB;AACA,MAAIC,UAAU,GAAG,CAAjB;AACAD,EAAAA,IAAI,CAACE,OAAL,CAAcC,OAAD,IAAa;AACxB,UAAMC,SAAS,GAAGf,WAAW,CAACc,OAAO,CAACb,WAAT,CAA7B;;AACA,QAAIc,SAAS,GAAGH,UAAhB,EAA4B;AAC1BA,MAAAA,UAAU,GAAGG,SAAb;AACD;AACF,GALD;AAMAC,EAAAA,OAAO,CAACC,GAAR,CAAYL,UAAZ;AACAA,EAAAA,UAAU,IAAI,EAAd;AACA,sBACE,QAAC,mBAAD;AAAqB,IAAA,SAAS,EAAC,OAA/B;AAAuC,IAAA,KAAK,EAAC,KAA7C;AAAmD,IAAA,MAAM,EAAE,GAA3D;AAAA,2BACE,QAAC,QAAD;AACE,MAAA,IAAI,EAAED,IADR;AAEE,MAAA,MAAM,EAAE;AACNO,QAAAA,GAAG,EAAE,CADC;AAENC,QAAAA,KAAK,EAAE,EAFD;AAGNC,QAAAA,IAAI,EAAER,UAHA;AAINS,QAAAA,MAAM,EAAE;AAJF,OAFV;AAQE,MAAA,MAAM,EAAC,UART;AAAA,8BAUE,QAAC,aAAD;AAAe,QAAA,eAAe,EAAC;AAA/B;AAAA;AAAA;AAAA;AAAA,cAVF,eAWE,QAAC,KAAD;AAAO,QAAA,IAAI,EAAC;AAAZ;AAAA;AAAA;AAAA;AAAA,cAXF,eAYE,QAAC,KAAD;AACE,QAAA,IAAI,EAAC,UADP;AAEE,QAAA,OAAO,EAAC,aAFV;AAGE,QAAA,IAAI,eAAE,QAAC,mBAAD;AAAA;AAAA;AAAA;AAAA;AAHR;AAAA;AAAA;AAAA;AAAA,cAZF,eAiBE,QAAC,OAAD;AAAS,QAAA,OAAO,eAAE,QAAC,iBAAD;AAAA;AAAA;AAAA;AAAA;AAAlB;AAAA;AAAA;AAAA;AAAA,cAjBF,eAkBE,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,cAlBF,eAmBE,QAAC,GAAD;AAAK,QAAA,OAAO,EAAC,UAAb;AAAwB,QAAA,IAAI,EAAC;AAA7B;AAAA;AAAA;AAAA;AAAA,cAnBF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAqCD,CAhDD;;GAAMZ,Y;;MAAAA,Y;AAkDN,eAAeA,YAAf","sourcesContent":["import React, { useState } from \"react\";\r\n\r\nimport \"../style.css\";\r\nimport {\r\n  BarChart,\r\n  Bar,\r\n  Cell,\r\n  XAxis,\r\n  YAxis,\r\n  CartesianGrid,\r\n  Tooltip,\r\n  Legend,\r\n  ResponsiveContainer,\r\n  LineChart,\r\n  Line,\r\n} from \"recharts\";\r\n\r\nconst CustomizedTooltip = ({ active, payload, label }) => {\r\n  if (active && payload && payload.length) {\r\n    return (\r\n      <div className=\"custom-tooltip\">\r\n        <p className=\"label\">{`Anomalies found from : ${payload[0].value[0]} until : ${payload[0].value[1]}`}</p>\r\n        <p className=\"desc\">Anything you want can be displayed here.</p>\r\n      </div>\r\n    );\r\n  }\r\n  return null;\r\n};\r\nconst CustomizedLabelAxis = ({ x, y, payload }) => {\r\n  const splitted = payload.value.split(\"~~\");\r\n  return (\r\n    <g transform={`translate(${x},${y})`}>\r\n      <text x={0} y={0} textAnchor=\"end\" fill=\"#666\">\r\n        <tspan>{splitted[0]}</tspan>\r\n        <tspan x={0} dy=\"20\">\r\n          {splitted[1]}\r\n        </tspan>\r\n      </text>\r\n    </g>\r\n  );\r\n};\r\nfunction measureText(description) {\r\n  const splitted = description.split(\"~~\");\r\n  const ctx = document.createElement(\"canvas\").getContext(\"2d\");\r\n  return Math.max(\r\n    ctx.measureText(splitted[0]).width,\r\n    ctx.measureText(splitted[1]).width\r\n  );\r\n}\r\nconst AnomalyChart = (props) => {\r\n  const [data] = useState(props.data);\r\n  let leftMargin = 0;\r\n  data.forEach((element) => {\r\n    const textWidth = measureText(element.description);\r\n    if (textWidth > leftMargin) {\r\n      leftMargin = textWidth;\r\n    }\r\n  });\r\n  console.log(leftMargin);\r\n  leftMargin += 30;\r\n  return (\r\n    <ResponsiveContainer className=\"chart\" width=\"50%\" height={400}>\r\n      <BarChart\r\n        data={data}\r\n        margin={{\r\n          top: 5,\r\n          right: 30,\r\n          left: leftMargin,\r\n          bottom: 5,\r\n        }}\r\n        layout=\"vertical\"\r\n      >\r\n        <CartesianGrid strokeDasharray=\"3 3\" />\r\n        <XAxis type=\"number\" />\r\n        <YAxis\r\n          type=\"category\"\r\n          dataKey=\"description\"\r\n          tick={<CustomizedLabelAxis />}\r\n        />\r\n        <Tooltip content={<CustomizedTooltip />} />\r\n        <Legend />\r\n        <Bar dataKey=\"timeStep\" fill=\"#8884d8\" />\r\n      </BarChart>\r\n      {/* <BarChart\r\n          width={600}\r\n          height={300}\r\n          data={this.props.report}\r\n          layout=\"vertical\"\r\n        >\r\n          <XAxis type=\"number\" />\r\n          <YAxis type=\"category\" dataKey=\"description\" stroke=\"#8884d8\" />\r\n          <Tooltip content={<CustomTooltip />} />\r\n          <CartesianGrid stroke=\"#ccc\" strokeDasharray=\"5 5\" />\r\n          <Bar dataKey=\"timeStep\" fill=\"#8884d8\" barSize={30} />\r\n        </BarChart> */}\r\n    </ResponsiveContainer>\r\n  );\r\n};\r\n\r\nexport default AnomalyChart;\r\n"]},"metadata":{},"sourceType":"module"}